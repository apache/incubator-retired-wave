/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


package org.waveprotocol.wave.client.util;

import org.waveprotocol.wave.common.bootstrap.FlagConstants;

/**
 * Autogenerated by Client Flags Generator
 * Contains definitions, getters and initialization code for flags.
 */

public class ClientFlagsBase {

  private final String addContactHelpUrl;

  private final String addNotificationEmailsHelpUrl;

  private final String allTemplateLocales;

  private final String allTutorialLocales;

  private final String allWelcomeWaveLocales;

  private final Boolean autoprint;

  private final Integer backgroundPageDelay;

  private final Integer backgroundPageSize;

  private final Boolean clearPendingNotifications;

  private final Integer clientLoadSearchTimeoutMs;

  private final Integer closeSuggestionsMenuDelayMs;

  private final Boolean configureNotificationSettings;

  private final String csiExperimentIds;

  private final String csiService;

  private final String defaultThreadState;

  private final Integer digestRemovalCooldownMs;

  private final Boolean disableTemplatePrefetch;

  private final Integer editAccessCheckMs;

  private final Integer editorInstrumentationBundleSize;

  private final Integer editorInstrumentationFrequency;

  private final Boolean enableAbortOnEmptyBlipMeansCancel;

  private final Boolean enableAttachmentDomains;

  private final Boolean enableBlipContextMenu;

  private final Boolean enableBlipReportAbuse;

  private final Boolean enableClientCreatedWelcomeWave;

  private final Boolean enableConfigNotificationAnnouncePopup;

  private final Boolean enableConsoleLogging;

  private final Boolean enableContactsInNavPanel;

  private final Boolean enableCopyParticipants;

  private final Boolean enableCopyToNewWaveOptions;

  private final Boolean enableDebugMenu;

  private final Boolean enableDeleteRootBlip;

  private final Boolean enableDemoMode;

  private final Boolean enableDigestLite;

  private final Boolean enableDigestOptimism;

  private final Boolean enableEditorDebugging;

  private final Boolean enableEditorInstrumentation;

  private final Boolean enableEquationEditor;

  private final Boolean enableExpandWith;

  private final Boolean enableExportButton;

  private final Boolean enableExportMenuItem;

  private final Boolean enableExportToGoogleDocs;

  private final Boolean enableExtensionCache;

  private final Boolean enableExtensionsQuicklink;

  private final Boolean enableExternalSiteSharing;

  private final Boolean enableFakeMode;

  private final Boolean enableFolderColors;

  private final Boolean enableFullScreenMaximize;

  private final Boolean enableFullWaveEditMode;

  private final Boolean enableGViewInNewTab;

  private final Boolean enableGroupsInNavPanel;

  private final Boolean enableHiringMessage;

  private final Boolean enableHoverInlineReplies;

  private final Boolean enableHtmlTemplates;

  private final Boolean enableImageDownsampling;

  private final Boolean enableInviteByEmail;

  private final Boolean enableInviteByEmailCallout;

  private final Boolean enableJsonMessageDebug;

  private final Boolean enableLinkToBlip;

  private final Boolean enableLinkToHereButton;

  private final Boolean enableLinkToWave;

  private final Boolean enableNavPanelLogo;

  private final Boolean enableNewBlipUi;

  private final Boolean enableNewCollapsableThreadUi;

  private final Boolean enableNewShinyUi;

  private final Boolean enableNextUnreadBlipInFooter;

  private final Boolean enableNextUnreadBlipInToolbar;

  private final Boolean enableNotificationAnnouncePopup;

  private final Boolean enableNotificationPerWave;

  private final Boolean enableNotificationSettings;

  private final Boolean enableNubifMonkeyPunching;

  private final Boolean enableOneWave;

  private final Boolean enableOptimisticDigestArchiving;

  private final Boolean enableParticipantDiffOnOpen;

  private final Boolean enableParticipantRoles;

  private final Boolean enablePlaybackRestoration;

  private final Boolean enablePrintButton;

  private final Boolean enablePrintCtrlP;

  private final Boolean enablePrintMenuItem;

  private final Boolean enableQuickBlipDelete;

  private final Boolean enableRefinement;

  private final Boolean enableRegexHooks;

  private final Boolean enableRemoveParticipant;

  private final Boolean enableReplyBox;

  private final Boolean enableRosy;

  private final Boolean enableScrolly;

  private final Boolean enableSearchDragDrop;

  private final Boolean enableSearchPanel;

  private final Boolean enableSeenVersioning;

  private final Boolean enableSelectionMenu;

  private final Boolean enableSimpleDigest;

  private final Boolean enableSpellAutocorrect;

  private final Boolean enableSpelly;

  private final Boolean enableStillUploadingWarning;

  private final Boolean enableTemplateLocales;

  private final Boolean enableTemplatedSearchPanelNewWave;

  private final Boolean enableTemplatedWelcomePanel;

  private final Boolean enableThumbnailMenu;

  private final Boolean enableToolbarCategories;

  private final Boolean enableTopPanel;

  private final Boolean enableTrustRequest;

  private final Boolean enableTrustyBlacklist;

  private final Boolean enableTutorialLocales;

  private final Boolean enableTypeToContinue;

  private final Boolean enableUndercurrentEditing;

  private final Boolean enableUndo;

  private final Boolean enableViewportStats;

  private final Boolean enableWavePanelHarness;

  private final Boolean enableWaveUndo;

  private final Boolean enableWaveUndoButtons;

  private final Boolean enableWaveUndoUi;

  private final Boolean enableWebSocketMode;

  private final Boolean enableWebdriverHook;

  private final Boolean enableWelcomePanelHooks;

  private final Boolean enableWelcomePanelTutorial;

  private final Boolean enableWelcomeWaveLocales;

  private final Boolean expandWelcomePanelTutorial;

  private final String extensionsAllGroup;

  private final String extensionsFeaturedGroup;

  private final Boolean failFastOnUnauthorisedEdits;

  private final String feedbackUrl;

  private final Boolean followAllWaves;

  private final Boolean forceNewWelcomePanel;

  private final Boolean forceShowNotificationAnnouncePopup;

  private final String gviewProviderId;

  private final String gviewUrl;

  private final Boolean hideBlueLineReplies;

  private final Boolean hideReplyButton;

  private final String hiringMessage;

  private final Integer idleTimeoutMillis;

  private final Boolean ignoreUdwErrors;

  private final Boolean inheritAccessRoles;

  private final Integer initialRpcBackoffMs;

  private final String inviteByMailHelpUrl;

  private final Boolean isInternalDogfoodInstance;

  private final Integer knownIssuesNumber;

  private final Integer layoutAnimationMs;

  private final String learnMoreAboutNotificationsHelpUrl;

  private final Boolean listEmailContacts;

  private final Boolean loadOrCreateSettingsWaves;

  private final Integer logoHeight;

  private final String logoUrl;

  private final Integer logoWidth;

  private final Integer maxCalloutParticipants;

  private final Integer maxContactsDesktop;

  private final Integer maxContactsMobile;

  private final Integer maxNumberOfPings;

  private final Integer maxPrefetchBurstRate;

  private final Double maxPrefetchSteadyRate;

  private final Integer maxRpcBackoffMs;

  private final Integer maxRpcBurstRate;

  private final Double maxRpcSteadyRate;

  private final Integer minRpcRetryTime;

  private final String mungeDomains;

  private final Boolean noIndentedReplies;

  private final String noUdwAuthors;

  private final Integer numParticipantSuggestions;

  private final Integer numShortNameContacts;

  private final String pingType;

  private final Integer playbackPrefetchDelay;

  private final Boolean preserveSelectionOnEdit;

  private final String profilePictureGadgetUrl;

  private final Integer reconnectionFudgeTime;

  private final Integer refreshContactsDelaySeconds;

  private final Integer removeParticipantAccessCheckMs;

  private final Boolean renderAllRepliesInline;

  private final Boolean replaceAllWithPublic;

  private final String robotDomains;

  private final Integer sanityCheckerTimeoutMs;

  private final Boolean schedulerKnobs;

  private final Integer scrollyFlatSpeed;

  private final Integer scrollyFlatThreshold;

  private final Integer scrollyGradient;

  private final Boolean scrubReferrers;

  private final Boolean searchEmailContacts;

  private final String settingsAvailableLanguages;

  private final Boolean showBiDiButtons;

  private final Boolean showGadgetSetting;

  private final Boolean showLanguageSetting;

  private final Boolean showPublicParticipant;

  private final Boolean showScrollySetting;

  private final Boolean showTrustUrlsSetting;

  private final Integer slowTaskBucketCutoff;

  private final Integer slowTaskMinMsCutoff;

  private final Integer slowTasksReported;

  private final Double spellCorrectHighThreshold;

  private final Double spellCorrectThreshold;

  private final Integer spellMenuDelayMs;

  private final Integer suggestionPollInterval;

  private final Integer templateLoadTimeoutMs;

  private final String uixImageProxyUrl;

  private final Boolean useAttachmentDataDocuments;

  private final Boolean useBackendContacts;

  private final Boolean useBackgroundWavePaging;

  private final Boolean useColouredCarets;

  private final Boolean useConversationModel;

  private final Boolean useDiffOnOpen;

  private final Boolean useExtensionWaves;

  private final Boolean useFancyCursorBias;

  private final Boolean useFollow;

  private final Boolean useHistoryServerForPlayback;

  private final Boolean useIdleDetector;

  private final Boolean useLineContainer;

  private final Boolean useNewBlipStructure;

  private final Boolean useNewContactPicker;

  private final Boolean useParticipantPanelDragDrop;

  private final Boolean useParticipantSuggestion;

  private final Boolean usePresentationModel;

  private final Boolean usePrivateGadgetStates;

  private final Boolean useProfileWaves;

  private final Boolean useSemanticCopyPaste;

  private final Boolean useWavePaging;

  private final Boolean useWebkitCompositionEvents;

  private final Boolean useWhitelistInEditor;

  private final Boolean validateLocalOps;

  private final Integer waveCacheTimeToEvict;

  private final Integer waveFetchTimeout;

  private final Boolean waveLoadingIndicator;

  private final Double wavePageRatio;

  private final String waveUserDomain;

  private final Integer waveletSyncIndicatorTimeoutMs;

  private final String welcomePanelTemplateCaptions;

  private final String welcomePanelTemplateIcons;

  private final String welcomePanelTemplateWaves;

  private final String welcomePanelTutorialCaptions;

  private final String welcomePanelTutorialIcons;

  private final String welcomePanelTutorialWaves;

  private final String welcomeWaveId;


  /**
   * Returns debug information for flag values.
   *
   * Every two objects in the array is a pair of (name, value) for each flag.
   *
   * WARNING(danilatos): !! This method leaks our flag names. Ensure it is
   * never called in permutations that can be exposed to the public, so that
   * it gets compiled out in those cases.
   */
  public Object[] getDebugPairs() {
    return new Object[] {
        "addContactHelpUrl", addContactHelpUrl,
        "addNotificationEmailsHelpUrl", addNotificationEmailsHelpUrl,
        "allTemplateLocales", allTemplateLocales,
        "allTutorialLocales", allTutorialLocales,
        "allWelcomeWaveLocales", allWelcomeWaveLocales,
        "autoprint", autoprint,
        "backgroundPageDelay", backgroundPageDelay,
        "backgroundPageSize", backgroundPageSize,
        "clearPendingNotifications", clearPendingNotifications,
        "clientLoadSearchTimeoutMs", clientLoadSearchTimeoutMs,
        "closeSuggestionsMenuDelayMs", closeSuggestionsMenuDelayMs,
        "configureNotificationSettings", configureNotificationSettings,
        "csiExperimentIds", csiExperimentIds,
        "csiService", csiService,
        "defaultThreadState", defaultThreadState,
        "digestRemovalCooldownMs", digestRemovalCooldownMs,
        "disableTemplatePrefetch", disableTemplatePrefetch,
        "editAccessCheckMs", editAccessCheckMs,
        "editorInstrumentationBundleSize", editorInstrumentationBundleSize,
        "editorInstrumentationFrequency", editorInstrumentationFrequency,
        "enableAbortOnEmptyBlipMeansCancel", enableAbortOnEmptyBlipMeansCancel,
        "enableAttachmentDomains", enableAttachmentDomains,
        "enableBlipContextMenu", enableBlipContextMenu,
        "enableBlipReportAbuse", enableBlipReportAbuse,
        "enableClientCreatedWelcomeWave", enableClientCreatedWelcomeWave,
        "enableConfigNotificationAnnouncePopup", enableConfigNotificationAnnouncePopup,
        "enableConsoleLogging", enableConsoleLogging,
        "enableContactsInNavPanel", enableContactsInNavPanel,
        "enableCopyParticipants", enableCopyParticipants,
        "enableCopyToNewWaveOptions", enableCopyToNewWaveOptions,
        "enableDebugMenu", enableDebugMenu,
        "enableDeleteRootBlip", enableDeleteRootBlip,
        "enableDemoMode", enableDemoMode,
        "enableDigestLite", enableDigestLite,
        "enableDigestOptimism", enableDigestOptimism,
        "enableEditorDebugging", enableEditorDebugging,
        "enableEditorInstrumentation", enableEditorInstrumentation,
        "enableEquationEditor", enableEquationEditor,
        "enableExpandWith", enableExpandWith,
        "enableExportButton", enableExportButton,
        "enableExportMenuItem", enableExportMenuItem,
        "enableExportToGoogleDocs", enableExportToGoogleDocs,
        "enableExtensionCache", enableExtensionCache,
        "enableExtensionsQuicklink", enableExtensionsQuicklink,
        "enableExternalSiteSharing", enableExternalSiteSharing,
        "enableFakeMode", enableFakeMode,
        "enableFolderColors", enableFolderColors,
        "enableFullScreenMaximize", enableFullScreenMaximize,
        "enableFullWaveEditMode", enableFullWaveEditMode,
        "enableGViewInNewTab", enableGViewInNewTab,
        "enableGroupsInNavPanel", enableGroupsInNavPanel,
        "enableHiringMessage", enableHiringMessage,
        "enableHoverInlineReplies", enableHoverInlineReplies,
        "enableHtmlTemplates", enableHtmlTemplates,
        "enableImageDownsampling", enableImageDownsampling,
        "enableInviteByEmail", enableInviteByEmail,
        "enableInviteByEmailCallout", enableInviteByEmailCallout,
        "enableJsonMessageDebug", enableJsonMessageDebug,
        "enableLinkToBlip", enableLinkToBlip,
        "enableLinkToHereButton", enableLinkToHereButton,
        "enableLinkToWave", enableLinkToWave,
        "enableNavPanelLogo", enableNavPanelLogo,
        "enableNewBlipUi", enableNewBlipUi,
        "enableNewCollapsableThreadUi", enableNewCollapsableThreadUi,
        "enableNewShinyUi", enableNewShinyUi,
        "enableNextUnreadBlipInFooter", enableNextUnreadBlipInFooter,
        "enableNextUnreadBlipInToolbar", enableNextUnreadBlipInToolbar,
        "enableNotificationAnnouncePopup", enableNotificationAnnouncePopup,
        "enableNotificationPerWave", enableNotificationPerWave,
        "enableNotificationSettings", enableNotificationSettings,
        "enableNubifMonkeyPunching", enableNubifMonkeyPunching,
        "enableOneWave", enableOneWave,
        "enableOptimisticDigestArchiving", enableOptimisticDigestArchiving,
        "enableParticipantDiffOnOpen", enableParticipantDiffOnOpen,
        "enableParticipantRoles", enableParticipantRoles,
        "enablePlaybackRestoration", enablePlaybackRestoration,
        "enablePrintButton", enablePrintButton,
        "enablePrintCtrlP", enablePrintCtrlP,
        "enablePrintMenuItem", enablePrintMenuItem,
        "enableQuickBlipDelete", enableQuickBlipDelete,
        "enableRefinement", enableRefinement,
        "enableRegexHooks", enableRegexHooks,
        "enableRemoveParticipant", enableRemoveParticipant,
        "enableReplyBox", enableReplyBox,
        "enableRosy", enableRosy,
        "enableScrolly", enableScrolly,
        "enableSearchDragDrop", enableSearchDragDrop,
        "enableSearchPanel", enableSearchPanel,
        "enableSeenVersioning", enableSeenVersioning,
        "enableSelectionMenu", enableSelectionMenu,
        "enableSimpleDigest", enableSimpleDigest,
        "enableSpellAutocorrect", enableSpellAutocorrect,
        "enableSpelly", enableSpelly,
        "enableStillUploadingWarning", enableStillUploadingWarning,
        "enableTemplateLocales", enableTemplateLocales,
        "enableTemplatedSearchPanelNewWave", enableTemplatedSearchPanelNewWave,
        "enableTemplatedWelcomePanel", enableTemplatedWelcomePanel,
        "enableThumbnailMenu", enableThumbnailMenu,
        "enableToolbarCategories", enableToolbarCategories,
        "enableTopPanel", enableTopPanel,
        "enableTrustRequest", enableTrustRequest,
        "enableTrustyBlacklist", enableTrustyBlacklist,
        "enableTutorialLocales", enableTutorialLocales,
        "enableTypeToContinue", enableTypeToContinue,
        "enableUndercurrentEditing", enableUndercurrentEditing,
        "enableUndo", enableUndo,
        "enableViewportStats", enableViewportStats,
        "enableWavePanelHarness", enableWavePanelHarness,
        "enableWaveUndo", enableWaveUndo,
        "enableWaveUndoButtons", enableWaveUndoButtons,
        "enableWaveUndoUi", enableWaveUndoUi,
        "enableWebSocketMode", enableWebSocketMode,
        "enableWebdriverHook", enableWebdriverHook,
        "enableWelcomePanelHooks", enableWelcomePanelHooks,
        "enableWelcomePanelTutorial", enableWelcomePanelTutorial,
        "enableWelcomeWaveLocales", enableWelcomeWaveLocales,
        "expandWelcomePanelTutorial", expandWelcomePanelTutorial,
        "extensionsAllGroup", extensionsAllGroup,
        "extensionsFeaturedGroup", extensionsFeaturedGroup,
        "failFastOnUnauthorisedEdits", failFastOnUnauthorisedEdits,
        "feedbackUrl", feedbackUrl,
        "followAllWaves", followAllWaves,
        "forceNewWelcomePanel", forceNewWelcomePanel,
        "forceShowNotificationAnnouncePopup", forceShowNotificationAnnouncePopup,
        "gviewProviderId", gviewProviderId,
        "gviewUrl", gviewUrl,
        "hideBlueLineReplies", hideBlueLineReplies,
        "hideReplyButton", hideReplyButton,
        "hiringMessage", hiringMessage,
        "idleTimeoutMillis", idleTimeoutMillis,
        "ignoreUdwErrors", ignoreUdwErrors,
        "inheritAccessRoles", inheritAccessRoles,
        "initialRpcBackoffMs", initialRpcBackoffMs,
        "inviteByMailHelpUrl", inviteByMailHelpUrl,
        "isInternalDogfoodInstance", isInternalDogfoodInstance,
        "knownIssuesNumber", knownIssuesNumber,
        "layoutAnimationMs", layoutAnimationMs,
        "learnMoreAboutNotificationsHelpUrl", learnMoreAboutNotificationsHelpUrl,
        "listEmailContacts", listEmailContacts,
        "loadOrCreateSettingsWaves", loadOrCreateSettingsWaves,
        "logoHeight", logoHeight,
        "logoUrl", logoUrl,
        "logoWidth", logoWidth,
        "maxCalloutParticipants", maxCalloutParticipants,
        "maxContactsDesktop", maxContactsDesktop,
        "maxContactsMobile", maxContactsMobile,
        "maxNumberOfPings", maxNumberOfPings,
        "maxPrefetchBurstRate", maxPrefetchBurstRate,
        "maxPrefetchSteadyRate", maxPrefetchSteadyRate,
        "maxRpcBackoffMs", maxRpcBackoffMs,
        "maxRpcBurstRate", maxRpcBurstRate,
        "maxRpcSteadyRate", maxRpcSteadyRate,
        "minRpcRetryTime", minRpcRetryTime,
        "mungeDomains", mungeDomains,
        "noIndentedReplies", noIndentedReplies,
        "noUdwAuthors", noUdwAuthors,
        "numParticipantSuggestions", numParticipantSuggestions,
        "numShortNameContacts", numShortNameContacts,
        "pingType", pingType,
        "playbackPrefetchDelay", playbackPrefetchDelay,
        "preserveSelectionOnEdit", preserveSelectionOnEdit,
        "profilePictureGadgetUrl", profilePictureGadgetUrl,
        "reconnectionFudgeTime", reconnectionFudgeTime,
        "refreshContactsDelaySeconds", refreshContactsDelaySeconds,
        "removeParticipantAccessCheckMs", removeParticipantAccessCheckMs,
        "renderAllRepliesInline", renderAllRepliesInline,
        "replaceAllWithPublic", replaceAllWithPublic,
        "robotDomains", robotDomains,
        "sanityCheckerTimeoutMs", sanityCheckerTimeoutMs,
        "schedulerKnobs", schedulerKnobs,
        "scrollyFlatSpeed", scrollyFlatSpeed,
        "scrollyFlatThreshold", scrollyFlatThreshold,
        "scrollyGradient", scrollyGradient,
        "scrubReferrers", scrubReferrers,
        "searchEmailContacts", searchEmailContacts,
        "settingsAvailableLanguages", settingsAvailableLanguages,
        "showBiDiButtons", showBiDiButtons,
        "showGadgetSetting", showGadgetSetting,
        "showLanguageSetting", showLanguageSetting,
        "showPublicParticipant", showPublicParticipant,
        "showScrollySetting", showScrollySetting,
        "showTrustUrlsSetting", showTrustUrlsSetting,
        "slowTaskBucketCutoff", slowTaskBucketCutoff,
        "slowTaskMinMsCutoff", slowTaskMinMsCutoff,
        "slowTasksReported", slowTasksReported,
        "spellCorrectHighThreshold", spellCorrectHighThreshold,
        "spellCorrectThreshold", spellCorrectThreshold,
        "spellMenuDelayMs", spellMenuDelayMs,
        "suggestionPollInterval", suggestionPollInterval,
        "templateLoadTimeoutMs", templateLoadTimeoutMs,
        "uixImageProxyUrl", uixImageProxyUrl,
        "useAttachmentDataDocuments", useAttachmentDataDocuments,
        "useBackendContacts", useBackendContacts,
        "useBackgroundWavePaging", useBackgroundWavePaging,
        "useColouredCarets", useColouredCarets,
        "useConversationModel", useConversationModel,
        "useDiffOnOpen", useDiffOnOpen,
        "useExtensionWaves", useExtensionWaves,
        "useFancyCursorBias", useFancyCursorBias,
        "useFollow", useFollow,
        "useHistoryServerForPlayback", useHistoryServerForPlayback,
        "useIdleDetector", useIdleDetector,
        "useLineContainer", useLineContainer,
        "useNewBlipStructure", useNewBlipStructure,
        "useNewContactPicker", useNewContactPicker,
        "useParticipantPanelDragDrop", useParticipantPanelDragDrop,
        "useParticipantSuggestion", useParticipantSuggestion,
        "usePresentationModel", usePresentationModel,
        "usePrivateGadgetStates", usePrivateGadgetStates,
        "useProfileWaves", useProfileWaves,
        "useSemanticCopyPaste", useSemanticCopyPaste,
        "useWavePaging", useWavePaging,
        "useWebkitCompositionEvents", useWebkitCompositionEvents,
        "useWhitelistInEditor", useWhitelistInEditor,
        "validateLocalOps", validateLocalOps,
        "waveCacheTimeToEvict", waveCacheTimeToEvict,
        "waveFetchTimeout", waveFetchTimeout,
        "waveLoadingIndicator", waveLoadingIndicator,
        "wavePageRatio", wavePageRatio,
        "waveUserDomain", waveUserDomain,
        "waveletSyncIndicatorTimeoutMs", waveletSyncIndicatorTimeoutMs,
        "welcomePanelTemplateCaptions", welcomePanelTemplateCaptions,
        "welcomePanelTemplateIcons", welcomePanelTemplateIcons,
        "welcomePanelTemplateWaves", welcomePanelTemplateWaves,
        "welcomePanelTutorialCaptions", welcomePanelTutorialCaptions,
        "welcomePanelTutorialIcons", welcomePanelTutorialIcons,
        "welcomePanelTutorialWaves", welcomePanelTutorialWaves,
        "welcomeWaveId", welcomeWaveId,

      };
  }

  /**
   * Constructor which populates fields using ClientFlagsBaseHelper.
   */
  public ClientFlagsBase(ClientFlagsBaseHelper helper) {
    addContactHelpUrl = helper.getString(FlagConstants.ADD_CONTACT_HELP_URL, "http://www.google.com/support/wave/bin/topic.py?topic=24977");
    addNotificationEmailsHelpUrl = helper.getString(FlagConstants.ADD_NOTIFICATION_EMAILS_HELP_URL, "http://www.google.com/support/wave/bin/answer.py?hl=en&answer=175738");
    allTemplateLocales = helper.getString(FlagConstants.ALL_TEMPLATE_LOCALES, "");
    allTutorialLocales = helper.getString(FlagConstants.ALL_TUTORIAL_LOCALES, "");
    allWelcomeWaveLocales = helper.getString(FlagConstants.ALL_WELCOME_WAVE_LOCALES, "");
    autoprint = helper.getBoolean(FlagConstants.AUTOPRINT, true);
    backgroundPageDelay = helper.getInteger(FlagConstants.BACKGROUND_PAGE_DELAY, 150);
    backgroundPageSize = helper.getInteger(FlagConstants.BACKGROUND_PAGE_SIZE, 200);
    clearPendingNotifications = helper.getBoolean(FlagConstants.CLEAR_PENDING_NOTIFICATIONS, false);
    clientLoadSearchTimeoutMs = helper.getInteger(FlagConstants.CLIENT_LOAD_SEARCH_TIMEOUT_MS, 5000);
    closeSuggestionsMenuDelayMs = helper.getInteger(FlagConstants.CLOSE_SUGGESTIONS_MENU_DELAY_MS, 500);
    configureNotificationSettings = helper.getBoolean(FlagConstants.CONFIGURE_NOTIFICATION_SETTINGS, false);
    csiExperimentIds = helper.getString(FlagConstants.CSI_EXPERIMENT_IDS, "");
    csiService = helper.getString(FlagConstants.CSI_SERVICE, "wave_dev");
    defaultThreadState = helper.getString(FlagConstants.DEFAULT_THREAD_STATE, "EXPANDED");
    digestRemovalCooldownMs = helper.getInteger(FlagConstants.DIGEST_REMOVAL_COOLDOWN_MS, 5000);
    disableTemplatePrefetch = helper.getBoolean(FlagConstants.DISABLE_TEMPLATE_PREFETCH, false);
    editAccessCheckMs = helper.getInteger(FlagConstants.EDIT_ACCESS_CHECK_MS, 20000);
    editorInstrumentationBundleSize = helper.getInteger(FlagConstants.EDITOR_INSTRUMENTATION_BUNDLE_SIZE, 20);
    editorInstrumentationFrequency = helper.getInteger(FlagConstants.EDITOR_INSTRUMENTATION_FREQUENCY, 5);
    enableAbortOnEmptyBlipMeansCancel = helper.getBoolean(FlagConstants.ENABLE_ABORT_ON_EMPTY_BLIP_MEANS_CANCEL, false);
    enableAttachmentDomains = helper.getBoolean(FlagConstants.ENABLE_ATTACHMENT_DOMAINS, false);
    enableBlipContextMenu = helper.getBoolean(FlagConstants.ENABLE_BLIP_CONTEXT_MENU, false);
    enableBlipReportAbuse = helper.getBoolean(FlagConstants.ENABLE_BLIP_REPORT_ABUSE, false);
    enableClientCreatedWelcomeWave = helper.getBoolean(FlagConstants.ENABLE_CLIENT_CREATED_WELCOME_WAVE, false);
    enableConfigNotificationAnnouncePopup = helper.getBoolean(FlagConstants.ENABLE_CONFIG_NOTIFICATION_ANNOUNCE_POPUP, false);
    enableConsoleLogging = helper.getBoolean(FlagConstants.ENABLE_CONSOLE_LOGGING, false);
    enableContactsInNavPanel = helper.getBoolean(FlagConstants.ENABLE_CONTACTS_IN_NAV_PANEL, false);
    enableCopyParticipants = helper.getBoolean(FlagConstants.ENABLE_COPY_PARTICIPANTS, false);
    enableCopyToNewWaveOptions = helper.getBoolean(FlagConstants.ENABLE_COPY_TO_NEW_WAVE_OPTIONS, false);
    enableDebugMenu = helper.getBoolean(FlagConstants.ENABLE_DEBUG_MENU, false);
    enableDeleteRootBlip = helper.getBoolean(FlagConstants.ENABLE_DELETE_ROOT_BLIP, false);
    enableDemoMode = helper.getBoolean(FlagConstants.ENABLE_DEMO_MODE, false);
    enableDigestLite = helper.getBoolean(FlagConstants.ENABLE_DIGEST_LITE, false);
    enableDigestOptimism = helper.getBoolean(FlagConstants.ENABLE_DIGEST_OPTIMISM, true);
    enableEditorDebugging = helper.getBoolean(FlagConstants.ENABLE_EDITOR_DEBUGGING, false);
    enableEditorInstrumentation = helper.getBoolean(FlagConstants.ENABLE_EDITOR_INSTRUMENTATION, false);
    enableEquationEditor = helper.getBoolean(FlagConstants.ENABLE_EQUATION_EDITOR, false);
    enableExpandWith = helper.getBoolean(FlagConstants.ENABLE_EXPAND_WITH, false);
    enableExportButton = helper.getBoolean(FlagConstants.ENABLE_EXPORT_BUTTON, false);
    enableExportMenuItem = helper.getBoolean(FlagConstants.ENABLE_EXPORT_MENU_ITEM, false);
    enableExportToGoogleDocs = helper.getBoolean(FlagConstants.ENABLE_EXPORT_TO_GOOGLE_DOCS, false);
    enableExtensionCache = helper.getBoolean(FlagConstants.ENABLE_EXTENSION_CACHE, true);
    enableExtensionsQuicklink = helper.getBoolean(FlagConstants.ENABLE_EXTENSIONS_QUICKLINK, true);
    enableExternalSiteSharing = helper.getBoolean(FlagConstants.ENABLE_EXTERNAL_SITE_SHARING, false);
    enableFakeMode = helper.getBoolean(FlagConstants.ENABLE_FAKE_MODE, false);
    enableFolderColors = helper.getBoolean(FlagConstants.ENABLE_FOLDER_COLORS, false);
    enableFullScreenMaximize = helper.getBoolean(FlagConstants.ENABLE_FULL_SCREEN_MAXIMIZE, false);
    enableFullWaveEditMode = helper.getBoolean(FlagConstants.ENABLE_FULL_WAVE_EDIT_MODE, false);
    enableGViewInNewTab = helper.getBoolean(FlagConstants.ENABLE_G_VIEW_IN_NEW_TAB, false);
    enableGroupsInNavPanel = helper.getBoolean(FlagConstants.ENABLE_GROUPS_IN_NAV_PANEL, false);
    enableHiringMessage = helper.getBoolean(FlagConstants.ENABLE_HIRING_MESSAGE, false);
    enableHoverInlineReplies = helper.getBoolean(FlagConstants.ENABLE_HOVER_INLINE_REPLIES, false);
    enableHtmlTemplates = helper.getBoolean(FlagConstants.ENABLE_HTML_TEMPLATES, false);
    enableImageDownsampling = helper.getBoolean(FlagConstants.ENABLE_IMAGE_DOWNSAMPLING, true);
    enableInviteByEmail = helper.getBoolean(FlagConstants.ENABLE_INVITE_BY_EMAIL, false);
    enableInviteByEmailCallout = helper.getBoolean(FlagConstants.ENABLE_INVITE_BY_EMAIL_CALLOUT, true);
    enableJsonMessageDebug = helper.getBoolean(FlagConstants.ENABLE_JSON_MESSAGE_DEBUG, false);
    enableLinkToBlip = helper.getBoolean(FlagConstants.ENABLE_LINK_TO_BLIP, false);
    enableLinkToHereButton = helper.getBoolean(FlagConstants.ENABLE_LINK_TO_HERE_BUTTON, false);
    enableLinkToWave = helper.getBoolean(FlagConstants.ENABLE_LINK_TO_WAVE, false);
    enableNavPanelLogo = helper.getBoolean(FlagConstants.ENABLE_NAV_PANEL_LOGO, false);
    enableNewBlipUi = helper.getBoolean(FlagConstants.ENABLE_NEW_BLIP_UI, false);
    enableNewCollapsableThreadUi = helper.getBoolean(FlagConstants.ENABLE_NEW_COLLAPSABLE_THREAD_UI, false);
    enableNewShinyUi = helper.getBoolean(FlagConstants.ENABLE_NEW_SHINY_UI, false);
    enableNextUnreadBlipInFooter = helper.getBoolean(FlagConstants.ENABLE_NEXT_UNREAD_BLIP_IN_FOOTER, false);
    enableNextUnreadBlipInToolbar = helper.getBoolean(FlagConstants.ENABLE_NEXT_UNREAD_BLIP_IN_TOOLBAR, false);
    enableNotificationAnnouncePopup = helper.getBoolean(FlagConstants.ENABLE_NOTIFICATION_ANNOUNCE_POPUP, false);
    enableNotificationPerWave = helper.getBoolean(FlagConstants.ENABLE_NOTIFICATION_PER_WAVE, false);
    enableNotificationSettings = helper.getBoolean(FlagConstants.ENABLE_NOTIFICATION_SETTINGS, false);
    enableNubifMonkeyPunching = helper.getBoolean(FlagConstants.ENABLE_NUBIF_MONKEY_PUNCHING, false);
    enableOneWave = helper.getBoolean(FlagConstants.ENABLE_ONE_WAVE, false);
    enableOptimisticDigestArchiving = helper.getBoolean(FlagConstants.ENABLE_OPTIMISTIC_DIGEST_ARCHIVING, false);
    enableParticipantDiffOnOpen = helper.getBoolean(FlagConstants.ENABLE_PARTICIPANT_DIFF_ON_OPEN, true);
    enableParticipantRoles = helper.getBoolean(FlagConstants.ENABLE_PARTICIPANT_ROLES, false);
    enablePlaybackRestoration = helper.getBoolean(FlagConstants.ENABLE_PLAYBACK_RESTORATION, false);
    enablePrintButton = helper.getBoolean(FlagConstants.ENABLE_PRINT_BUTTON, false);
    enablePrintCtrlP = helper.getBoolean(FlagConstants.ENABLE_PRINT_CTRL_P, false);
    enablePrintMenuItem = helper.getBoolean(FlagConstants.ENABLE_PRINT_MENU_ITEM, false);
    enableQuickBlipDelete = helper.getBoolean(FlagConstants.ENABLE_QUICK_BLIP_DELETE, false);
    enableRefinement = helper.getBoolean(FlagConstants.ENABLE_REFINEMENT, false);
    enableRegexHooks = helper.getBoolean(FlagConstants.ENABLE_REGEX_HOOKS, true);
    enableRemoveParticipant = helper.getBoolean(FlagConstants.ENABLE_REMOVE_PARTICIPANT, true);
    enableReplyBox = helper.getBoolean(FlagConstants.ENABLE_REPLY_BOX, false);
    enableRosy = helper.getBoolean(FlagConstants.ENABLE_ROSY, false);
    enableScrolly = helper.getBoolean(FlagConstants.ENABLE_SCROLLY, true);
    enableSearchDragDrop = helper.getBoolean(FlagConstants.ENABLE_SEARCH_DRAG_DROP, true);
    enableSearchPanel = helper.getBoolean(FlagConstants.ENABLE_SEARCH_PANEL, false);
    enableSeenVersioning = helper.getBoolean(FlagConstants.ENABLE_SEEN_VERSIONING, true);
    enableSelectionMenu = helper.getBoolean(FlagConstants.ENABLE_SELECTION_MENU, false);
    enableSimpleDigest = helper.getBoolean(FlagConstants.ENABLE_SIMPLE_DIGEST, false);
    enableSpellAutocorrect = helper.getBoolean(FlagConstants.ENABLE_SPELL_AUTOCORRECT, false);
    enableSpelly = helper.getBoolean(FlagConstants.ENABLE_SPELLY, true);
    enableStillUploadingWarning = helper.getBoolean(FlagConstants.ENABLE_STILL_UPLOADING_WARNING, true);
    enableTemplateLocales = helper.getBoolean(FlagConstants.ENABLE_TEMPLATE_LOCALES, false);
    enableTemplatedSearchPanelNewWave = helper.getBoolean(FlagConstants.ENABLE_TEMPLATED_SEARCH_PANEL_NEW_WAVE, false);
    enableTemplatedWelcomePanel = helper.getBoolean(FlagConstants.ENABLE_TEMPLATED_WELCOME_PANEL, false);
    enableThumbnailMenu = helper.getBoolean(FlagConstants.ENABLE_THUMBNAIL_MENU, false);
    enableToolbarCategories = helper.getBoolean(FlagConstants.ENABLE_TOOLBAR_CATEGORIES, false);
    enableTopPanel = helper.getBoolean(FlagConstants.ENABLE_TOP_PANEL, true);
    enableTrustRequest = helper.getBoolean(FlagConstants.ENABLE_TRUST_REQUEST, false);
    enableTrustyBlacklist = helper.getBoolean(FlagConstants.ENABLE_TRUSTY_BLACKLIST, false);
    enableTutorialLocales = helper.getBoolean(FlagConstants.ENABLE_TUTORIAL_LOCALES, false);
    enableTypeToContinue = helper.getBoolean(FlagConstants.ENABLE_TYPE_TO_CONTINUE, false);
    enableUndercurrentEditing = helper.getBoolean(FlagConstants.ENABLE_UNDERCURRENT_EDITING, true);
    enableUndo = helper.getBoolean(FlagConstants.ENABLE_UNDO, true);
    enableViewportStats = helper.getBoolean(FlagConstants.ENABLE_VIEWPORT_STATS, false);
    enableWavePanelHarness = helper.getBoolean(FlagConstants.ENABLE_WAVE_PANEL_HARNESS, true);
    enableWaveUndo = helper.getBoolean(FlagConstants.ENABLE_WAVE_UNDO, false);
    enableWaveUndoButtons = helper.getBoolean(FlagConstants.ENABLE_WAVE_UNDO_BUTTONS, false);
    enableWaveUndoUi = helper.getBoolean(FlagConstants.ENABLE_WAVE_UNDO_UI, false);
    enableWebSocketMode = helper.getBoolean(FlagConstants.ENABLE_WEB_SOCKET_MODE, false);
    enableWebdriverHook = helper.getBoolean(FlagConstants.ENABLE_WEBDRIVER_HOOK, false);
    enableWelcomePanelHooks = helper.getBoolean(FlagConstants.ENABLE_WELCOME_PANEL_HOOKS, false);
    enableWelcomePanelTutorial = helper.getBoolean(FlagConstants.ENABLE_WELCOME_PANEL_TUTORIAL, false);
    enableWelcomeWaveLocales = helper.getBoolean(FlagConstants.ENABLE_WELCOME_WAVE_LOCALES, false);
    expandWelcomePanelTutorial = helper.getBoolean(FlagConstants.EXPAND_WELCOME_PANEL_TUTORIAL, false);
    extensionsAllGroup = helper.getString(FlagConstants.EXTENSIONS_ALL_GROUP, "");
    extensionsFeaturedGroup = helper.getString(FlagConstants.EXTENSIONS_FEATURED_GROUP, "");
    failFastOnUnauthorisedEdits = helper.getBoolean(FlagConstants.FAIL_FAST_ON_UNAUTHORISED_EDITS, false);
    feedbackUrl = helper.getString(FlagConstants.FEEDBACK_URL, "");
    followAllWaves = helper.getBoolean(FlagConstants.FOLLOW_ALL_WAVES, true);
    forceNewWelcomePanel = helper.getBoolean(FlagConstants.FORCE_NEW_WELCOME_PANEL, false);
    forceShowNotificationAnnouncePopup = helper.getBoolean(FlagConstants.FORCE_SHOW_NOTIFICATION_ANNOUNCE_POPUP, false);
    gviewProviderId = helper.getString(FlagConstants.GVIEW_PROVIDER_ID, "");
    gviewUrl = helper.getString(FlagConstants.GVIEW_URL, "");
    hideBlueLineReplies = helper.getBoolean(FlagConstants.HIDE_BLUE_LINE_REPLIES, false);
    hideReplyButton = helper.getBoolean(FlagConstants.HIDE_REPLY_BUTTON, false);
    hiringMessage = helper.getString(FlagConstants.HIRING_MESSAGE, "Wave team is _hiring_!");
    idleTimeoutMillis = helper.getInteger(FlagConstants.IDLE_TIMEOUT_MILLIS, 300000);
    ignoreUdwErrors = helper.getBoolean(FlagConstants.IGNORE_UDW_ERRORS, true);
    inheritAccessRoles = helper.getBoolean(FlagConstants.INHERIT_ACCESS_ROLES, true);
    initialRpcBackoffMs = helper.getInteger(FlagConstants.INITIAL_RPC_BACKOFF_MS, 1000);
    inviteByMailHelpUrl = helper.getString(FlagConstants.INVITE_BY_MAIL_HELP_URL, "http://www.google.com/support/wave/bin/answer.py?answer=182709");
    isInternalDogfoodInstance = helper.getBoolean(FlagConstants.IS_INTERNAL_DOGFOOD_INSTANCE, false);
    knownIssuesNumber = helper.getInteger(FlagConstants.KNOWN_ISSUES_NUMBER, -1);
    layoutAnimationMs = helper.getInteger(FlagConstants.LAYOUT_ANIMATION_MS, 300);
    learnMoreAboutNotificationsHelpUrl = helper.getString(FlagConstants.LEARN_MORE_ABOUT_NOTIFICATIONS_HELP_URL, "http://www.google.com/support/wave/bin/answer.py?hl=en&answer=175737");
    listEmailContacts = helper.getBoolean(FlagConstants.LIST_EMAIL_CONTACTS, true);
    loadOrCreateSettingsWaves = helper.getBoolean(FlagConstants.LOAD_OR_CREATE_SETTINGS_WAVES, false);
    logoHeight = helper.getInteger(FlagConstants.LOGO_HEIGHT, 39);
    logoUrl = helper.getString(FlagConstants.LOGO_URL, "static/images/logo.png");
    logoWidth = helper.getInteger(FlagConstants.LOGO_WIDTH, 136);
    maxCalloutParticipants = helper.getInteger(FlagConstants.MAX_CALLOUT_PARTICIPANTS, 3);
    maxContactsDesktop = helper.getInteger(FlagConstants.MAX_CONTACTS_DESKTOP, 50);
    maxContactsMobile = helper.getInteger(FlagConstants.MAX_CONTACTS_MOBILE, 30);
    maxNumberOfPings = helper.getInteger(FlagConstants.MAX_NUMBER_OF_PINGS, 10);
    maxPrefetchBurstRate = helper.getInteger(FlagConstants.MAX_PREFETCH_BURST_RATE, 40);
    maxPrefetchSteadyRate = helper.getDouble(FlagConstants.MAX_PREFETCH_STEADY_RATE, 0.5);
    maxRpcBackoffMs = helper.getInteger(FlagConstants.MAX_RPC_BACKOFF_MS, 60000);
    maxRpcBurstRate = helper.getInteger(FlagConstants.MAX_RPC_BURST_RATE, 10);
    maxRpcSteadyRate = helper.getDouble(FlagConstants.MAX_RPC_STEADY_RATE, 1.0);
    minRpcRetryTime = helper.getInteger(FlagConstants.MIN_RPC_RETRY_TIME, 5000);
    mungeDomains = helper.getString(FlagConstants.MUNGE_DOMAINS, "gmail.com,googlemail.com");
    noIndentedReplies = helper.getBoolean(FlagConstants.NO_INDENTED_REPLIES, false);
    noUdwAuthors = helper.getString(FlagConstants.NO_UDW_AUTHORS, "");
    numParticipantSuggestions = helper.getInteger(FlagConstants.NUM_PARTICIPANT_SUGGESTIONS, 5);
    numShortNameContacts = helper.getInteger(FlagConstants.NUM_SHORT_NAME_CONTACTS, 50);
    pingType = helper.getString(FlagConstants.PING_TYPE, "DISABLED");
    playbackPrefetchDelay = helper.getInteger(FlagConstants.PLAYBACK_PREFETCH_DELAY, 1000);
    preserveSelectionOnEdit = helper.getBoolean(FlagConstants.PRESERVE_SELECTION_ON_EDIT, false);
    profilePictureGadgetUrl = helper.getString(FlagConstants.PROFILE_PICTURE_GADGET_URL, "https://wave.google.com/wave/static/gadgets/onepick.xml");
    reconnectionFudgeTime = helper.getInteger(FlagConstants.RECONNECTION_FUDGE_TIME, 10000);
    refreshContactsDelaySeconds = helper.getInteger(FlagConstants.REFRESH_CONTACTS_DELAY_SECONDS, 30);
    removeParticipantAccessCheckMs = helper.getInteger(FlagConstants.REMOVE_PARTICIPANT_ACCESS_CHECK_MS, 10000);
    renderAllRepliesInline = helper.getBoolean(FlagConstants.RENDER_ALL_REPLIES_INLINE, false);
    replaceAllWithPublic = helper.getBoolean(FlagConstants.REPLACE_ALL_WITH_PUBLIC, false);
    robotDomains = helper.getString(FlagConstants.ROBOT_DOMAINS, "");
    sanityCheckerTimeoutMs = helper.getInteger(FlagConstants.SANITY_CHECKER_TIMEOUT_MS, 60000);
    schedulerKnobs = helper.getBoolean(FlagConstants.SCHEDULER_KNOBS, false);
    scrollyFlatSpeed = helper.getInteger(FlagConstants.SCROLLY_FLAT_SPEED, 300);
    scrollyFlatThreshold = helper.getInteger(FlagConstants.SCROLLY_FLAT_THRESHOLD, 25);
    scrollyGradient = helper.getInteger(FlagConstants.SCROLLY_GRADIENT, 5);
    scrubReferrers = helper.getBoolean(FlagConstants.SCRUB_REFERRERS, true);
    searchEmailContacts = helper.getBoolean(FlagConstants.SEARCH_EMAIL_CONTACTS, true);
    settingsAvailableLanguages = helper.getString(FlagConstants.SETTINGS_AVAILABLE_LANGUAGES, "ar,bg,ca,cs,da,de,el,en,en_GB,es,fi,fil,fr,hi,hr,hu,id,it,iw,ja,ko,lt,lv,nl,no,pl,pt,pt_PT,ro,ru,sk,sl,sr,sv,th,tr,uk,vi,zh,zh_TW");
    showBiDiButtons = helper.getBoolean(FlagConstants.SHOW_BI_DI_BUTTONS, false);
    showGadgetSetting = helper.getBoolean(FlagConstants.SHOW_GADGET_SETTING, false);
    showLanguageSetting = helper.getBoolean(FlagConstants.SHOW_LANGUAGE_SETTING, false);
    showPublicParticipant = helper.getBoolean(FlagConstants.SHOW_PUBLIC_PARTICIPANT, true);
    showScrollySetting = helper.getBoolean(FlagConstants.SHOW_SCROLLY_SETTING, false);
    showTrustUrlsSetting = helper.getBoolean(FlagConstants.SHOW_TRUST_URLS_SETTING, false);
    slowTaskBucketCutoff = helper.getInteger(FlagConstants.SLOW_TASK_BUCKET_CUTOFF, 3);
    slowTaskMinMsCutoff = helper.getInteger(FlagConstants.SLOW_TASK_MIN_MS_CUTOFF, 100);
    slowTasksReported = helper.getInteger(FlagConstants.SLOW_TASKS_REPORTED, 10);
    spellCorrectHighThreshold = helper.getDouble(FlagConstants.SPELL_CORRECT_HIGH_THRESHOLD, 0.0);
    spellCorrectThreshold = helper.getDouble(FlagConstants.SPELL_CORRECT_THRESHOLD, 1.0);
    spellMenuDelayMs = helper.getInteger(FlagConstants.SPELL_MENU_DELAY_MS, 100);
    suggestionPollInterval = helper.getInteger(FlagConstants.SUGGESTION_POLL_INTERVAL, 10000);
    templateLoadTimeoutMs = helper.getInteger(FlagConstants.TEMPLATE_LOAD_TIMEOUT_MS, 10000);
    uixImageProxyUrl = helper.getString(FlagConstants.UIX_IMAGE_PROXY_URL, "http://opensocial-prod.corp.googleusercontent.com/gadgets/proxy");
    useAttachmentDataDocuments = helper.getBoolean(FlagConstants.USE_ATTACHMENT_DATA_DOCUMENTS, true);
    useBackendContacts = helper.getBoolean(FlagConstants.USE_BACKEND_CONTACTS, false);
    useBackgroundWavePaging = helper.getBoolean(FlagConstants.USE_BACKGROUND_WAVE_PAGING, false);
    useColouredCarets = helper.getBoolean(FlagConstants.USE_COLOURED_CARETS, true);
    useConversationModel = helper.getBoolean(FlagConstants.USE_CONVERSATION_MODEL, false);
    useDiffOnOpen = helper.getBoolean(FlagConstants.USE_DIFF_ON_OPEN, true);
    useExtensionWaves = helper.getBoolean(FlagConstants.USE_EXTENSION_WAVES, true);
    useFancyCursorBias = helper.getBoolean(FlagConstants.USE_FANCY_CURSOR_BIAS, false);
    useFollow = helper.getBoolean(FlagConstants.USE_FOLLOW, false);
    useHistoryServerForPlayback = helper.getBoolean(FlagConstants.USE_HISTORY_SERVER_FOR_PLAYBACK, true);
    useIdleDetector = helper.getBoolean(FlagConstants.USE_IDLE_DETECTOR, false);
    useLineContainer = helper.getBoolean(FlagConstants.USE_LINE_CONTAINER, true);
    useNewBlipStructure = helper.getBoolean(FlagConstants.USE_NEW_BLIP_STRUCTURE, true);
    useNewContactPicker = helper.getBoolean(FlagConstants.USE_NEW_CONTACT_PICKER, false);
    useParticipantPanelDragDrop = helper.getBoolean(FlagConstants.USE_PARTICIPANT_PANEL_DRAG_DROP, false);
    useParticipantSuggestion = helper.getBoolean(FlagConstants.USE_PARTICIPANT_SUGGESTION, false);
    usePresentationModel = helper.getBoolean(FlagConstants.USE_PRESENTATION_MODEL, false);
    usePrivateGadgetStates = helper.getBoolean(FlagConstants.USE_PRIVATE_GADGET_STATES, true);
    useProfileWaves = helper.getBoolean(FlagConstants.USE_PROFILE_WAVES, true);
    useSemanticCopyPaste = helper.getBoolean(FlagConstants.USE_SEMANTIC_COPY_PASTE, true);
    useWavePaging = helper.getBoolean(FlagConstants.USE_WAVE_PAGING, false);
    useWebkitCompositionEvents = helper.getBoolean(FlagConstants.USE_WEBKIT_COMPOSITION_EVENTS, true);
    useWhitelistInEditor = helper.getBoolean(FlagConstants.USE_WHITELIST_IN_EDITOR, false);
    validateLocalOps = helper.getBoolean(FlagConstants.VALIDATE_LOCAL_OPS, true);
    waveCacheTimeToEvict = helper.getInteger(FlagConstants.WAVE_CACHE_TIME_TO_EVICT, 60000);
    waveFetchTimeout = helper.getInteger(FlagConstants.WAVE_FETCH_TIMEOUT, 15000);
    waveLoadingIndicator = helper.getBoolean(FlagConstants.WAVE_LOADING_INDICATOR, false);
    wavePageRatio = helper.getDouble(FlagConstants.WAVE_PAGE_RATIO, 1.2);
    waveUserDomain = helper.getString(FlagConstants.WAVE_USER_DOMAIN, "googlewave.com");
    waveletSyncIndicatorTimeoutMs = helper.getInteger(FlagConstants.WAVELET_SYNC_INDICATOR_TIMEOUT_MS, 12000);
    welcomePanelTemplateCaptions = helper.getString(FlagConstants.WELCOME_PANEL_TEMPLATE_CAPTIONS, "");
    welcomePanelTemplateIcons = helper.getString(FlagConstants.WELCOME_PANEL_TEMPLATE_ICONS, "");
    welcomePanelTemplateWaves = helper.getString(FlagConstants.WELCOME_PANEL_TEMPLATE_WAVES, "");
    welcomePanelTutorialCaptions = helper.getString(FlagConstants.WELCOME_PANEL_TUTORIAL_CAPTIONS, "");
    welcomePanelTutorialIcons = helper.getString(FlagConstants.WELCOME_PANEL_TUTORIAL_ICONS, "");
    welcomePanelTutorialWaves = helper.getString(FlagConstants.WELCOME_PANEL_TUTORIAL_WAVES, "");
    welcomeWaveId = helper.getString(FlagConstants.WELCOME_WAVE_ID, "");

  }


  /**
   *
   */
  public String addContactHelpUrl() {
    return addContactHelpUrl;
  }

  /**
   *
   */
  public String addNotificationEmailsHelpUrl() {
    return addNotificationEmailsHelpUrl;
  }

  /**
   *
   */
  public String allTemplateLocales() {
    return allTemplateLocales;
  }

  /**
   *
   */
  public String allTutorialLocales() {
    return allTutorialLocales;
  }

  /**
   *
   */
  public String allWelcomeWaveLocales() {
    return allWelcomeWaveLocales;
  }

  /**
   *
   */
  public Boolean autoprint() {
    return autoprint;
  }

  /**
   *
   */
  public Integer backgroundPageDelay() {
    return backgroundPageDelay;
  }

  /**
   *
   */
  public Integer backgroundPageSize() {
    return backgroundPageSize;
  }

  /**
   *
   */
  public Boolean clearPendingNotifications() {
    return clearPendingNotifications;
  }

  /**
   *
   */
  public Integer clientLoadSearchTimeoutMs() {
    return clientLoadSearchTimeoutMs;
  }

  /**
   *
   */
  public Integer closeSuggestionsMenuDelayMs() {
    return closeSuggestionsMenuDelayMs;
  }

  /**
   *
   */
  public Boolean configureNotificationSettings() {
    return configureNotificationSettings;
  }

  /**
   *
   */
  public String csiExperimentIds() {
    return csiExperimentIds;
  }

  /**
   *
   */
  public String csiService() {
    return csiService;
  }

  /**
   *
   */
  public String defaultThreadState() {
    return defaultThreadState;
  }

  /**
   *
   */
  public Integer digestRemovalCooldownMs() {
    return digestRemovalCooldownMs;
  }

  /**
   *
   */
  public Boolean disableTemplatePrefetch() {
    return disableTemplatePrefetch;
  }

  /**
   *
   */
  public Integer editAccessCheckMs() {
    return editAccessCheckMs;
  }

  /**
   *
   */
  public Integer editorInstrumentationBundleSize() {
    return editorInstrumentationBundleSize;
  }

  /**
   *
   */
  public Integer editorInstrumentationFrequency() {
    return editorInstrumentationFrequency;
  }

  /**
   *
   */
  public Boolean enableAbortOnEmptyBlipMeansCancel() {
    return enableAbortOnEmptyBlipMeansCancel;
  }

  /**
   *
   */
  public Boolean enableAttachmentDomains() {
    return enableAttachmentDomains;
  }

  /**
   *
   */
  public Boolean enableBlipContextMenu() {
    return enableBlipContextMenu;
  }

  /**
   *
   */
  public Boolean enableBlipReportAbuse() {
    return enableBlipReportAbuse;
  }

  /**
   *
   */
  public Boolean enableClientCreatedWelcomeWave() {
    return enableClientCreatedWelcomeWave;
  }

  /**
   *
   */
  public Boolean enableConfigNotificationAnnouncePopup() {
    return enableConfigNotificationAnnouncePopup;
  }

  /**
   *
   */
  public Boolean enableConsoleLogging() {
    return enableConsoleLogging;
  }

  /**
   *
   */
  public Boolean enableContactsInNavPanel() {
    return enableContactsInNavPanel;
  }

  /**
   *
   */
  public Boolean enableCopyParticipants() {
    return enableCopyParticipants;
  }

  /**
   *
   */
  public Boolean enableCopyToNewWaveOptions() {
    return enableCopyToNewWaveOptions;
  }

  /**
   *
   */
  public Boolean enableDebugMenu() {
    return enableDebugMenu;
  }

  /**
   *
   */
  public Boolean enableDeleteRootBlip() {
    return enableDeleteRootBlip;
  }

  /**
   *
   */
  public Boolean enableDemoMode() {
    return enableDemoMode;
  }

  /**
   *
   */
  public Boolean enableDigestLite() {
    return enableDigestLite;
  }

  /**
   *
   */
  public Boolean enableDigestOptimism() {
    return enableDigestOptimism;
  }

  /**
   *
   */
  public Boolean enableEditorDebugging() {
    return enableEditorDebugging;
  }

  /**
   *
   */
  public Boolean enableEditorInstrumentation() {
    return enableEditorInstrumentation;
  }

  /**
   *
   */
  public Boolean enableEquationEditor() {
    return enableEquationEditor;
  }

  /**
   *
   */
  public Boolean enableExpandWith() {
    return enableExpandWith;
  }

  /**
   *
   */
  public Boolean enableExportButton() {
    return enableExportButton;
  }

  /**
   *
   */
  public Boolean enableExportMenuItem() {
    return enableExportMenuItem;
  }

  /**
   *
   */
  public Boolean enableExportToGoogleDocs() {
    return enableExportToGoogleDocs;
  }

  /**
   *
   */
  public Boolean enableExtensionCache() {
    return enableExtensionCache;
  }

  /**
   *
   */
  public Boolean enableExtensionsQuicklink() {
    return enableExtensionsQuicklink;
  }

  /**
   *
   */
  public Boolean enableExternalSiteSharing() {
    return enableExternalSiteSharing;
  }

  /**
   *
   */
  public Boolean enableFakeMode() {
    return enableFakeMode;
  }

  /**
   *
   */
  public Boolean enableFolderColors() {
    return enableFolderColors;
  }

  /**
   *
   */
  public Boolean enableFullScreenMaximize() {
    return enableFullScreenMaximize;
  }

  /**
   *
   */
  public Boolean enableFullWaveEditMode() {
    return enableFullWaveEditMode;
  }

  /**
   *
   */
  public Boolean enableGViewInNewTab() {
    return enableGViewInNewTab;
  }

  /**
   *
   */
  public Boolean enableGroupsInNavPanel() {
    return enableGroupsInNavPanel;
  }

  /**
   *
   */
  public Boolean enableHiringMessage() {
    return enableHiringMessage;
  }

  /**
   *
   */
  public Boolean enableHoverInlineReplies() {
    return enableHoverInlineReplies;
  }

  /**
   *
   */
  public Boolean enableHtmlTemplates() {
    return enableHtmlTemplates;
  }

  /**
   *
   */
  public Boolean enableImageDownsampling() {
    return enableImageDownsampling;
  }

  /**
   *
   */
  public Boolean enableInviteByEmail() {
    return enableInviteByEmail;
  }

  /**
   *
   */
  public Boolean enableInviteByEmailCallout() {
    return enableInviteByEmailCallout;
  }

  /**
   *
   */
  public Boolean enableJsonMessageDebug() {
    return enableJsonMessageDebug;
  }

  /**
   *
   */
  public Boolean enableLinkToBlip() {
    return enableLinkToBlip;
  }

  /**
   *
   */
  public Boolean enableLinkToHereButton() {
    return enableLinkToHereButton;
  }

  /**
   *
   */
  public Boolean enableLinkToWave() {
    return enableLinkToWave;
  }

  /**
   *
   */
  public Boolean enableNavPanelLogo() {
    return enableNavPanelLogo;
  }

  /**
   *
   */
  public Boolean enableNewBlipUi() {
    return enableNewBlipUi;
  }

  /**
   *
   */
  public Boolean enableNewCollapsableThreadUi() {
    return enableNewCollapsableThreadUi;
  }

  /**
   *
   */
  public Boolean enableNewShinyUi() {
    return enableNewShinyUi;
  }

  /**
   *
   */
  public Boolean enableNextUnreadBlipInFooter() {
    return enableNextUnreadBlipInFooter;
  }

  /**
   *
   */
  public Boolean enableNextUnreadBlipInToolbar() {
    return enableNextUnreadBlipInToolbar;
  }

  /**
   *
   */
  public Boolean enableNotificationAnnouncePopup() {
    return enableNotificationAnnouncePopup;
  }

  /**
   *
   */
  public Boolean enableNotificationPerWave() {
    return enableNotificationPerWave;
  }

  /**
   *
   */
  public Boolean enableNotificationSettings() {
    return enableNotificationSettings;
  }

  /**
   *
   */
  public Boolean enableNubifMonkeyPunching() {
    return enableNubifMonkeyPunching;
  }

  /**
   *
   */
  public Boolean enableOneWave() {
    return enableOneWave;
  }

  /**
   *
   */
  public Boolean enableOptimisticDigestArchiving() {
    return enableOptimisticDigestArchiving;
  }

  /**
   *
   */
  public Boolean enableParticipantDiffOnOpen() {
    return enableParticipantDiffOnOpen;
  }

  /**
   *
   */
  public Boolean enableParticipantRoles() {
    return enableParticipantRoles;
  }

  /**
   *
   */
  public Boolean enablePlaybackRestoration() {
    return enablePlaybackRestoration;
  }

  /**
   *
   */
  public Boolean enablePrintButton() {
    return enablePrintButton;
  }

  /**
   *
   */
  public Boolean enablePrintCtrlP() {
    return enablePrintCtrlP;
  }

  /**
   *
   */
  public Boolean enablePrintMenuItem() {
    return enablePrintMenuItem;
  }

  /**
   *
   */
  public Boolean enableQuickBlipDelete() {
    return enableQuickBlipDelete;
  }

  /**
   *
   */
  public Boolean enableRefinement() {
    return enableRefinement;
  }

  /**
   *
   */
  public Boolean enableRegexHooks() {
    return enableRegexHooks;
  }

  /**
   *
   */
  public Boolean enableRemoveParticipant() {
    return enableRemoveParticipant;
  }

  /**
   *
   */
  public Boolean enableReplyBox() {
    return enableReplyBox;
  }

  /**
   *
   */
  public Boolean enableRosy() {
    return enableRosy;
  }

  /**
   *
   */
  public Boolean enableScrolly() {
    return enableScrolly;
  }

  /**
   *
   */
  public Boolean enableSearchDragDrop() {
    return enableSearchDragDrop;
  }

  /**
   *
   */
  public Boolean enableSearchPanel() {
    return enableSearchPanel;
  }

  /**
   *
   */
  public Boolean enableSeenVersioning() {
    return enableSeenVersioning;
  }

  /**
   *
   */
  public Boolean enableSelectionMenu() {
    return enableSelectionMenu;
  }

  /**
   *
   */
  public Boolean enableSimpleDigest() {
    return enableSimpleDigest;
  }

  /**
   *
   */
  public Boolean enableSpellAutocorrect() {
    return enableSpellAutocorrect;
  }

  /**
   *
   */
  public Boolean enableSpelly() {
    return enableSpelly;
  }

  /**
   *
   */
  public Boolean enableStillUploadingWarning() {
    return enableStillUploadingWarning;
  }

  /**
   *
   */
  public Boolean enableTemplateLocales() {
    return enableTemplateLocales;
  }

  /**
   *
   */
  public Boolean enableTemplatedSearchPanelNewWave() {
    return enableTemplatedSearchPanelNewWave;
  }

  /**
   *
   */
  public Boolean enableTemplatedWelcomePanel() {
    return enableTemplatedWelcomePanel;
  }

  /**
   *
   */
  public Boolean enableThumbnailMenu() {
    return enableThumbnailMenu;
  }

  /**
   *
   */
  public Boolean enableToolbarCategories() {
    return enableToolbarCategories;
  }

  /**
   *
   */
  public Boolean enableTopPanel() {
    return enableTopPanel;
  }

  /**
   *
   */
  public Boolean enableTrustRequest() {
    return enableTrustRequest;
  }

  /**
   *
   */
  public Boolean enableTrustyBlacklist() {
    return enableTrustyBlacklist;
  }

  /**
   *
   */
  public Boolean enableTutorialLocales() {
    return enableTutorialLocales;
  }

  /**
   *
   */
  public Boolean enableTypeToContinue() {
    return enableTypeToContinue;
  }

  /**
   *
   */
  public Boolean enableUndercurrentEditing() {
    return enableUndercurrentEditing;
  }

  /**
   *
   */
  public Boolean enableUndo() {
    return enableUndo;
  }

  /**
   *
   */
  public Boolean enableViewportStats() {
    return enableViewportStats;
  }

  /**
   *
   */
  public Boolean enableWavePanelHarness() {
    return enableWavePanelHarness;
  }

  /**
   *
   */
  public Boolean enableWaveUndo() {
    return enableWaveUndo;
  }

  /**
   *
   */
  public Boolean enableWaveUndoButtons() {
    return enableWaveUndoButtons;
  }

  /**
   *
   */
  public Boolean enableWaveUndoUi() {
    return enableWaveUndoUi;
  }

  /**
   *
   */
  public Boolean enableWebSocketMode() {
    return enableWebSocketMode;
  }

  /**
   *
   */
  public Boolean enableWebdriverHook() {
    return enableWebdriverHook;
  }

  /**
   *
   */
  public Boolean enableWelcomePanelHooks() {
    return enableWelcomePanelHooks;
  }

  /**
   *
   */
  public Boolean enableWelcomePanelTutorial() {
    return enableWelcomePanelTutorial;
  }

  /**
   *
   */
  public Boolean enableWelcomeWaveLocales() {
    return enableWelcomeWaveLocales;
  }

  /**
   *
   */
  public Boolean expandWelcomePanelTutorial() {
    return expandWelcomePanelTutorial;
  }

  /**
   *
   */
  public String extensionsAllGroup() {
    return extensionsAllGroup;
  }

  /**
   *
   */
  public String extensionsFeaturedGroup() {
    return extensionsFeaturedGroup;
  }

  /**
   *
   */
  public Boolean failFastOnUnauthorisedEdits() {
    return failFastOnUnauthorisedEdits;
  }

  /**
   *
   */
  public String feedbackUrl() {
    return feedbackUrl;
  }

  /**
   *
   */
  public Boolean followAllWaves() {
    return followAllWaves;
  }

  /**
   *
   */
  public Boolean forceNewWelcomePanel() {
    return forceNewWelcomePanel;
  }

  /**
   *
   */
  public Boolean forceShowNotificationAnnouncePopup() {
    return forceShowNotificationAnnouncePopup;
  }

  /**
   *
   */
  public String gviewProviderId() {
    return gviewProviderId;
  }

  /**
   *
   */
  public String gviewUrl() {
    return gviewUrl;
  }

  /**
   *
   */
  public Boolean hideBlueLineReplies() {
    return hideBlueLineReplies;
  }

  /**
   *
   */
  public Boolean hideReplyButton() {
    return hideReplyButton;
  }

  /**
   *
   */
  public String hiringMessage() {
    return hiringMessage;
  }

  /**
   *
   */
  public Integer idleTimeoutMillis() {
    return idleTimeoutMillis;
  }

  /**
   *
   */
  public Boolean ignoreUdwErrors() {
    return ignoreUdwErrors;
  }

  /**
   *
   */
  public Boolean inheritAccessRoles() {
    return inheritAccessRoles;
  }

  /**
   *
   */
  public Integer initialRpcBackoffMs() {
    return initialRpcBackoffMs;
  }

  /**
   *
   */
  public String inviteByMailHelpUrl() {
    return inviteByMailHelpUrl;
  }

  /**
   *
   */
  public Boolean isInternalDogfoodInstance() {
    return isInternalDogfoodInstance;
  }

  /**
   *
   */
  public Integer knownIssuesNumber() {
    return knownIssuesNumber;
  }

  /**
   *
   */
  public Integer layoutAnimationMs() {
    return layoutAnimationMs;
  }

  /**
   *
   */
  public String learnMoreAboutNotificationsHelpUrl() {
    return learnMoreAboutNotificationsHelpUrl;
  }

  /**
   *
   */
  public Boolean listEmailContacts() {
    return listEmailContacts;
  }

  /**
   *
   */
  public Boolean loadOrCreateSettingsWaves() {
    return loadOrCreateSettingsWaves;
  }

  /**
   *
   */
  public Integer logoHeight() {
    return logoHeight;
  }

  /**
   *
   */
  public String logoUrl() {
    return logoUrl;
  }

  /**
   *
   */
  public Integer logoWidth() {
    return logoWidth;
  }

  /**
   *
   */
  public Integer maxCalloutParticipants() {
    return maxCalloutParticipants;
  }

  /**
   *
   */
  public Integer maxContactsDesktop() {
    return maxContactsDesktop;
  }

  /**
   *
   */
  public Integer maxContactsMobile() {
    return maxContactsMobile;
  }

  /**
   *
   */
  public Integer maxNumberOfPings() {
    return maxNumberOfPings;
  }

  /**
   *
   */
  public Integer maxPrefetchBurstRate() {
    return maxPrefetchBurstRate;
  }

  /**
   *
   */
  public Double maxPrefetchSteadyRate() {
    return maxPrefetchSteadyRate;
  }

  /**
   *
   */
  public Integer maxRpcBackoffMs() {
    return maxRpcBackoffMs;
  }

  /**
   *
   */
  public Integer maxRpcBurstRate() {
    return maxRpcBurstRate;
  }

  /**
   *
   */
  public Double maxRpcSteadyRate() {
    return maxRpcSteadyRate;
  }

  /**
   *
   */
  public Integer minRpcRetryTime() {
    return minRpcRetryTime;
  }

  /**
   *
   */
  public String mungeDomains() {
    return mungeDomains;
  }

  /**
   *
   */
  public Boolean noIndentedReplies() {
    return noIndentedReplies;
  }

  /**
   *
   */
  public String noUdwAuthors() {
    return noUdwAuthors;
  }

  /**
   *
   */
  public Integer numParticipantSuggestions() {
    return numParticipantSuggestions;
  }

  /**
   *
   */
  public Integer numShortNameContacts() {
    return numShortNameContacts;
  }

  /**
   *
   */
  public String pingType() {
    return pingType;
  }

  /**
   *
   */
  public Integer playbackPrefetchDelay() {
    return playbackPrefetchDelay;
  }

  /**
   *
   */
  public Boolean preserveSelectionOnEdit() {
    return preserveSelectionOnEdit;
  }

  /**
   *
   */
  public String profilePictureGadgetUrl() {
    return profilePictureGadgetUrl;
  }

  /**
   *
   */
  public Integer reconnectionFudgeTime() {
    return reconnectionFudgeTime;
  }

  /**
   *
   */
  public Integer refreshContactsDelaySeconds() {
    return refreshContactsDelaySeconds;
  }

  /**
   *
   */
  public Integer removeParticipantAccessCheckMs() {
    return removeParticipantAccessCheckMs;
  }

  /**
   *
   */
  public Boolean renderAllRepliesInline() {
    return renderAllRepliesInline;
  }

  /**
   *
   */
  public Boolean replaceAllWithPublic() {
    return replaceAllWithPublic;
  }

  /**
   *
   */
  public String robotDomains() {
    return robotDomains;
  }

  /**
   *
   */
  public Integer sanityCheckerTimeoutMs() {
    return sanityCheckerTimeoutMs;
  }

  /**
   *
   */
  public Boolean schedulerKnobs() {
    return schedulerKnobs;
  }

  /**
   *
   */
  public Integer scrollyFlatSpeed() {
    return scrollyFlatSpeed;
  }

  /**
   *
   */
  public Integer scrollyFlatThreshold() {
    return scrollyFlatThreshold;
  }

  /**
   *
   */
  public Integer scrollyGradient() {
    return scrollyGradient;
  }

  /**
   *
   */
  public Boolean scrubReferrers() {
    return scrubReferrers;
  }

  /**
   *
   */
  public Boolean searchEmailContacts() {
    return searchEmailContacts;
  }

  /**
   *
   */
  public String settingsAvailableLanguages() {
    return settingsAvailableLanguages;
  }

  /**
   *
   */
  public Boolean showBiDiButtons() {
    return showBiDiButtons;
  }

  /**
   *
   */
  public Boolean showGadgetSetting() {
    return showGadgetSetting;
  }

  /**
   *
   */
  public Boolean showLanguageSetting() {
    return showLanguageSetting;
  }

  /**
   *
   */
  public Boolean showPublicParticipant() {
    return showPublicParticipant;
  }

  /**
   *
   */
  public Boolean showScrollySetting() {
    return showScrollySetting;
  }

  /**
   *
   */
  public Boolean showTrustUrlsSetting() {
    return showTrustUrlsSetting;
  }

  /**
   *
   */
  public Integer slowTaskBucketCutoff() {
    return slowTaskBucketCutoff;
  }

  /**
   *
   */
  public Integer slowTaskMinMsCutoff() {
    return slowTaskMinMsCutoff;
  }

  /**
   *
   */
  public Integer slowTasksReported() {
    return slowTasksReported;
  }

  /**
   *
   */
  public Double spellCorrectHighThreshold() {
    return spellCorrectHighThreshold;
  }

  /**
   *
   */
  public Double spellCorrectThreshold() {
    return spellCorrectThreshold;
  }

  /**
   *
   */
  public Integer spellMenuDelayMs() {
    return spellMenuDelayMs;
  }

  /**
   *
   */
  public Integer suggestionPollInterval() {
    return suggestionPollInterval;
  }

  /**
   *
   */
  public Integer templateLoadTimeoutMs() {
    return templateLoadTimeoutMs;
  }

  /**
   *
   */
  public String uixImageProxyUrl() {
    return uixImageProxyUrl;
  }

  /**
   *
   */
  public Boolean useAttachmentDataDocuments() {
    return useAttachmentDataDocuments;
  }

  /**
   *
   */
  public Boolean useBackendContacts() {
    return useBackendContacts;
  }

  /**
   *
   */
  public Boolean useBackgroundWavePaging() {
    return useBackgroundWavePaging;
  }

  /**
   *
   */
  public Boolean useColouredCarets() {
    return useColouredCarets;
  }

  /**
   *
   */
  public Boolean useConversationModel() {
    return useConversationModel;
  }

  /**
   *
   */
  public Boolean useDiffOnOpen() {
    return useDiffOnOpen;
  }

  /**
   *
   */
  public Boolean useExtensionWaves() {
    return useExtensionWaves;
  }

  /**
   *
   */
  public Boolean useFancyCursorBias() {
    return useFancyCursorBias;
  }

  /**
   *
   */
  public Boolean useFollow() {
    return useFollow;
  }

  /**
   *
   */
  public Boolean useHistoryServerForPlayback() {
    return useHistoryServerForPlayback;
  }

  /**
   *
   */
  public Boolean useIdleDetector() {
    return useIdleDetector;
  }

  /**
   *
   */
  public Boolean useLineContainer() {
    return useLineContainer;
  }

  /**
   *
   */
  public Boolean useNewBlipStructure() {
    return useNewBlipStructure;
  }

  /**
   *
   */
  public Boolean useNewContactPicker() {
    return useNewContactPicker;
  }

  /**
   *
   */
  public Boolean useParticipantPanelDragDrop() {
    return useParticipantPanelDragDrop;
  }

  /**
   *
   */
  public Boolean useParticipantSuggestion() {
    return useParticipantSuggestion;
  }

  /**
   *
   */
  public Boolean usePresentationModel() {
    return usePresentationModel;
  }

  /**
   *
   */
  public Boolean usePrivateGadgetStates() {
    return usePrivateGadgetStates;
  }

  /**
   *
   */
  public Boolean useProfileWaves() {
    return useProfileWaves;
  }

  /**
   *
   */
  public Boolean useSemanticCopyPaste() {
    return useSemanticCopyPaste;
  }

  /**
   *
   */
  public Boolean useWavePaging() {
    return useWavePaging;
  }

  /**
   *
   */
  public Boolean useWebkitCompositionEvents() {
    return useWebkitCompositionEvents;
  }

  /**
   *
   */
  public Boolean useWhitelistInEditor() {
    return useWhitelistInEditor;
  }

  /**
   *
   */
  public Boolean validateLocalOps() {
    return validateLocalOps;
  }

  /**
   *
   */
  public Integer waveCacheTimeToEvict() {
    return waveCacheTimeToEvict;
  }

  /**
   *
   */
  public Integer waveFetchTimeout() {
    return waveFetchTimeout;
  }

  /**
   *
   */
  public Boolean waveLoadingIndicator() {
    return waveLoadingIndicator;
  }

  /**
   *
   */
  public Double wavePageRatio() {
    return wavePageRatio;
  }

  /**
   *
   */
  public String waveUserDomain() {
    return waveUserDomain;
  }

  /**
   *
   */
  public Integer waveletSyncIndicatorTimeoutMs() {
    return waveletSyncIndicatorTimeoutMs;
  }

  /**
   *
   */
  public String welcomePanelTemplateCaptions() {
    return welcomePanelTemplateCaptions;
  }

  /**
   *
   */
  public String welcomePanelTemplateIcons() {
    return welcomePanelTemplateIcons;
  }

  /**
   *
   */
  public String welcomePanelTemplateWaves() {
    return welcomePanelTemplateWaves;
  }

  /**
   *
   */
  public String welcomePanelTutorialCaptions() {
    return welcomePanelTutorialCaptions;
  }

  /**
   *
   */
  public String welcomePanelTutorialIcons() {
    return welcomePanelTutorialIcons;
  }

  /**
   *
   */
  public String welcomePanelTutorialWaves() {
    return welcomePanelTutorialWaves;
  }

  /**
   *
   */
  public String welcomeWaveId() {
    return welcomeWaveId;
  }

}